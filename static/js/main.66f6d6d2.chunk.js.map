{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","app","index","url","transformRequest","props","console","log","body","JSON","parse","substring","indexOf","trim","stringify","from","size","term","headers","replace","theme","typography","fontFamily","fontSize","colors","textColor","primaryTextColor","primaryColor","titleColor","alertColor","componentId","dataField","placeholder","autosuggest","highlight","customHighlight","pre_tags","post_tags","fields","content_html","number_of_fragments","customQuery","react","and","renderItem","res","dangerouslySetInnerHTML","__html","renderResultStats","stats","style","numberOfResults","time","renderNoResults","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAgGeA,E,4JAxFb,WACE,OACE,eAAC,IAAD,CACEC,IAAI,KACJC,MAAM,KACNC,IAAI,mCACJC,iBAAkB,SAAAC,GAChBC,QAAQC,IAAIF,GAEZ,IAAMG,EAAOC,KAAKC,MAAML,EAAMG,KAAKG,UAAUN,EAAMG,KAAKI,QAAQ,MAAQ,GAAGC,QAa3E,OAZAP,QAAQC,IAAIC,GAEZH,EAAMG,KAAOC,KAAKK,UAAU,CAC1BC,KAAMP,EAAKO,MAAQ,EACnBC,KAAMR,EAAKQ,MAAQ,GACnBC,KAAMT,EAAKS,MAAQ,KAGrBZ,EAAMa,QAAQ,gBAAkB,mBAEhCb,EAAMF,IAAME,EAAMF,IAAIgB,QAAQ,cAAe,UAEtCd,GAETe,MAAO,CACLC,WAAY,CACVC,WAAY,UACZC,SAAU,WAGZC,OAAQ,CACNC,UAAW,UACXC,iBAAkB,UAClBC,aAAc,UACdC,WAAY,UACZC,WAAY,YAjClB,UAqCE,cAAC,IAAD,CACEC,YAAY,YACZC,UAAU,eACVC,YAAY,GACZC,aAAa,EACbC,WAAW,EACXC,gBAAiB,SAAC9B,GAAD,MAAY,CAC3B6B,UAAW,CACTE,SAAU,CAAC,UACXC,UAAW,CAAC,WACZC,OAAQ,CACNC,aAAc,IAEhBC,oBAAqB,KAGzBC,YAAa,SAACxB,GAAD,MAAW,CACtBA,WAGJ,cAAC,IAAD,CACEa,YAAY,gBACZC,UAAU,eACVW,MAAO,CACLC,IAAK,CAAC,cAERC,WAAY,SAACC,GAAD,OACV,qBACEC,wBAAyB,CACvBC,OAAQ,aAAeF,EAAIN,iBAIjCS,kBAAmB,SAACC,GAAD,OACjB,mBAAGC,MAAO,CAAE3B,SAAU,UAAtB,mBACE0B,EAAME,gBAAkB,IACpBF,EAAME,gBACN,kBAHN,8BAIsBF,EAAMG,KAJ5B,WAMFC,gBAAiB,kBACf,mBAAGH,MAAO,CAAE3B,SAAU,UAAtB,yC,GAjFM+B,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66f6d6d2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  ReactiveBase,\n  DataSearch,\n  ReactiveList,\n} from \"@appbaseio/reactivesearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <ReactiveBase\n        app=\"qa\"\n        index=\"qa\"\n        url=\"https://api.billwurtz-search.com\"\n        transformRequest={props => {\n          console.log(props);\n          // body is msearch (one header line + 1 line per search query), we use only the 1st query and parse it as json\n          const body = JSON.parse(props.body.substring(props.body.indexOf(\"\\n\") + 1).trim());\n          console.log(body);\n\n          props.body = JSON.stringify({\n            from: body.from || 0,\n            size: body.size || 10,\n            term: body.term || ''\n          });\n\n          props.headers['Content-Type'] = 'application/json';\n          \n          props.url = props.url.replace('qa/_msearch', 'search')\n\n          return props;\n        }}\n        theme={{\n          typography: {\n            fontFamily: \"initial\",\n            fontSize: \"initial\",\n          },\n\n          colors: {\n            textColor: \"#FFFFFF\",\n            primaryTextColor: \"#FFFFFF\",\n            primaryColor: \"#FFFFFF\",\n            titleColor: \"#FFFFFF\",\n            alertColor: \"#FFFFFF\",\n          },\n        }}\n      >\n        <DataSearch\n          componentId=\"searchbox\"\n          dataField=\"content_html\"\n          placeholder=\"\"\n          autosuggest={false}\n          highlight={true}\n          customHighlight={(props) => ({\n            highlight: {\n              pre_tags: [\"<mark>\"],\n              post_tags: [\"</mark>\"],\n              fields: {\n                content_html: {},\n              },\n              number_of_fragments: 0,\n            },\n          })}\n          customQuery={(term) => ({\n            term\n          })}\n        />\n        <ReactiveList\n          componentId=\"searchresults\"\n          dataField=\"content_html\"\n          react={{\n            and: [\"searchbox\"],\n          }}\n          renderItem={(res) => (\n            <div\n              dangerouslySetInnerHTML={{\n                __html: \"</br></br>\" + res.content_html,\n              }}\n            />\n          )}\n          renderResultStats={(stats) => (\n            <p style={{ fontSize: \"0.83em\" }}>{`${\n              stats.numberOfResults < 10000\n                ? stats.numberOfResults\n                : \"More than 10000\"\n            } results founds in ${stats.time} ms.`}</p>\n          )}\n          renderNoResults={() => (\n            <p style={{ fontSize: \"0.83em\" }}>No results found.</p>\n          )}\n        />\n      </ReactiveBase>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}